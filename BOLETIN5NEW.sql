--Crear un procedimiento que en la tabla emp incremente el salario el 10% a los empleados que tengan una comisión superior al 5% del salario. 
CREATE OR REPLACE 
PROCEDURE P_SALARIAL
IS
    CURSOR C_SALARIAL IS
    SELECT E.SAL AS NUEVOSALARIO
    FROM EMP E
    WHERE E.COMM>(E.SAL*0.05)
    FOR UPDATE;
    VALORSALARIO EMP.SAL%TYPE;
BEGIN
    OPEN  C_SALARIAL;
    FETCH C_SALARIAL INTO VALORSALARIO;
    WHILE C_SALARIAL%FOUND
    LOOP
    UPDATE EMP SET SAL=SAL*1.1 WHERE CURRENT OF C_SALARIAL;
    FETCH C_SALARIAL INTO VALORSALARIO;
    END LOOP;
    CLOSE C_SALARIAL;
    EXCEPTION
        WHEN INVALID_CURSOR THEN
        DBMS_OUTPUT.PUT_LINE('OPERACION CON EL CURSOR INVALIDO');
        WHEN OTHERS THEN{
            DBMS_OUTPUT.PUT_LINE('ERROR EN EL PROCEDIMIENTO DE INCREMENTAR SALARIO');
        }
END;
EXECUTE P_SALARIAL;
--BEGIN
   -- P_SALARIAL;
--END;
--Realiza un procedimiento MostrarMejoresVendedores que muestre los nombres de los dos vendedores/as con más comisiones
CREATE OR REPLACE PROCEDURE EMPRESA.MOSTRARMEJORESVENDEDORES
IS
	TWO_MANY_ROOWS EXCEPTION;
	NOT_DATA_FOUND EXCEPTION;
    CURSOR C_BESTVENDEDOR IS
    SELECT *
	FROM (SELECT E.*
	FROM EMP e 
	WHERE E.COMM IS NOT NULL
	ORDER BY E.COMM DESC)
	WHERE ROWNUM <= 2;
    TRABAJADOR EMP%ROWTYPE;
BEGIN
    OPEN C_BESTVENDEDOR;
    FETCH C_BESTVENDEDOR INTO TRABAJADOR;
    WHILE(C_BESTVENDEDOR%ROWCOUNT<3)
    LOOP
    DBMS_OUTPUT.PUT_LINE( TRABAJADOR.ENAME || ' ES UN BUEN EMPLEADO');
    FETCH C_BESTVENDEDOR INTO TRABAJADOR;
   END LOOP;
    CLOSE C_BESTVENDEDOR;
    EXCEPTION
    WHEN TWO_MANY_ROOWS THEN
        DBMS_OUTPUT.PUT_LINE('DEMASIADAS FILAS SELECCIONADAS');
    WHEN NOT_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE(' NO EXISTE NINGUN EMPLEADO QUE CUMPLA LA CONDICION');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('ERROR EN EL PROCEDIMIENTO');
END;
BEGIN
	MOSTRARMEJORESJUGADORES;
END;
--Realiza un procedimiento MostrarsodaelpmE que reciba el nombre de un departamento al revés y muestre los nombres de los empleados de ese departamento.
CREATE OR REPLACE
PROCEDURE MOSTRARSODAELPME(NOMBREDEPAR VARCHAR2)
IS
    CURSOR C_EMPLEADOREVERSE (NOMBREDEPAR VARCHAR2) IS
    SELECT E.ENAME
    FROM EMP E, DEPT D
    WHERE E.DEPTNO=D.DEPTNO AND D.DNAME=REVERSE(NOMBREDEPAR);
    NOMEMPLEADO EMP.ENAME%TYPE;
    V_DEPTNO EMP.DEPTNO%TYPE;
BEGIN
	SELECT D.DEPTNO INTO V_DEPTNO FROM DEPT D WHERE D.NAME=REVERSE(NOMBREDEPAR)
	FOR NOMEMPLEADO IN C_EMPLEADOREVERSE
    LOOP
        DBMS.OUTPUT.PUT_LINE('EL EMPLEADO' || NOMEMPLEADO.ENAME || 'FORMA PARTE DEL DEPARTAMENTO');
    END LOOP;
END;
BEGIN
    MOSTRARSODAELPME('SELAS');
END;

CREATE OR REPLACE PROCEDURE MostrarsodaelpmE(DEPARTAMENTO_AL_REVES VARCHAR2) IS
NOMBRE_BIEN VARCHAR2(50);
DEPART_NO_EXISTE EXCEPTION;

	CURSOR C_EJ3 IS
	SELECT E.ENAME
	FROM DEPT d ,EMP e 
	WHERE D.DEPTNO = E.DEPTNO
	AND D.DNAME = REVERSE(DEPARTAMENTO_AL_REVES);

v_deptno dept.deptno%TYPE;
BEGIN
	--Comprobando que existe el departamento pasado por parámetro
	SELECT d.DEPTNO INTO v_deptno from dept d WHERE D.DNAME = REVERSE(DEPARTAMENTO_AL_REVES);
	
	FOR empleados IN C_EJ3
	LOOP
		DBMS_OUTPUT.PUT
DBMS_OUTPUT.PUT_LINE('EMPLEADO: ' || empleados.ENAME);
	END LOOP;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			DBMS_OUTPUT.PUT_LINE('No existe el departamento');
END;

CREATE OR REPLACE PROCEDURE MostrarsodaelpmE(DEPARTAMENTO_AL_REVES VARCHAR2) IS
NOMBRE_BIEN VARCHAR2(50);
DEPART_NO_EXISTE EXCEPTION;

	CURSOR C_EJ3 IS
	SELECT E.ENAME
	FROM DEPT d ,EMP e 
	WHERE D.DEPTNO = E.DEPTNO
	AND D.DNAME = REVERSE(DEPARTAMENTO_AL_REVES);

v_deptno dept.deptno%TYPE;
NO_DATOS EXCEPTION;
BEGIN
	--Comprobando que existe el departamento pasado por parámetro
	SELECT count(d.DEPTNO) INTO v_deptno from dept d WHERE D.DNAME = REVERSE(DEPARTAMENTO_AL_REVES);
	IF v_deptno =0 THEN
		RAISE NO_DATOS;
	END IF;
	FOR empleados IN C_EJ3
	LOOP
		DBMS_OUTPUT.PUT_LINE('EMPLEADO: ' || empleados.ENAME);
	END LOOP;
	EXCEPTION
		WHEN NO_DATOS THEN
			DBMS_OUTPUT.PUT_LINE('No existe el departamento');
END;
--Realiza un procedimiento RecortarSueldos que recorte el sueldo un 20% a los empleados cuyo nombre empiece por la letra que recibe como parámetro. Trata las excepciones que consideres necesarias.
CREATE OR REPLACE PROCEDURE EMPRESA.RECORTARSUELDOS(LETRA VARCHAR2)
IS
    CURSOR C_RECORTESUELDOS(LETRA VARCHAR2) IS
    SELECT E.SAL
    FROM EMP E
    WHERE E.ENAME LIKE LETRA || '%'
    FOR UPDATE;
    NOMBRE EMP.ENAME%TYPE;
BEGIN 
    OPEN C_RECORTESUELDOS('M');
    FETCH C_RECORTESUELDOS INTO NOMBRE;
    WHILE C_RECORTESUELDOS%FOUND
    LOOP 
    UPDATE EMP SET SAL=SAL*0.8 WHERE CURRENT OF C_RECORTESUELDOS;
    FETCH C_RECORTESUELDOS INTO NOMBRE;
    END LOOP;
    CLOSE C_RECORTESUELDOS;
    /*EXCEPTION 
    WHEN C_RECORTESUELDOS%ISOPEN THEN
        DBMS_OUTPUT.PUT_LINE('El cursor esta cerrado');
    WHEN C_RECORTESUELDOS%ROWCOUNT=0 THEN
        DBMS_OUTPUT.PUT_LINE('El cursor no devuelve informacion');*/
END;
BEGIN
    RECORTARSUELDOS('M');
END;
--Realiza un procedimiento BorrarBecarios que borre a los dos empleados más nuevos de cada departamento.
CREATE OR REPLACE PROCEDURE EMPRESA.BORRARBECARIOS
IS
    CURSOR C_DELETE IS
    SELECT E.EMPNO, D.DEPTNO, E.HIREDATE
    FROM EMP E, DEPT D
    WHERE E.DEPTNO=D.DEPTNO
    GROUP BY D.DEPTNO, E.EMPNO, E.HIREDATE
    ORDER BY E.HIREDATE DESC;
    BECARIO EMP.EMPNO%TYPE;
BEGIN
    FOR BECARIO IN C_DELETE
    LOOP
        DELETE FROM EMP WHERE EMPNO=BECARIO.EMPNO;
    END LOOP;
END;
BEGIN
    BORRARBECARIOS;
END;
--CURSOR ANIDADO 1
CREATE OR REPLACE PROCEDURE DUMMY.BORRAR_EMP IS
	--cursor explícito para recuperar departamentos
    CURSOR C_DEPT IS 
	SELECT * FROM DEPT;
	--cursor explícito para recupara empleado por cada departamento
	CURSOR C_EMP(V_DEPT DEPT.DEPTNO%TYPE) IS
	SELECT * FROM (SELECT E.* FROM EMP E
	WHERE E.DEPTNO=V_DEPT
	ORDER BY E.HIREDATE)
	WHERE ROWNUM<=2;

BEGIN 
	FOR registro_dept IN C_DEPT LOOP	
		FOR REGISTRO_EMP IN C_EMP(registro_dept.deptno) LOOP	
			DELETE FROM EMP WHERE EMPNO=REGISTRO_EMP.EMPNO;
END LOOP;
	
	END LOOP;
END;
--EJERCICIO CURSORES ANIDADOS


--Muestra por cada departamento su listado de empleados con el siguiente formato
-- Nombre depatarmento: Ventas
			--Empleado: Marta  Trabajo: MANAGER 
			--Empleado: Dario  Trabajo: SALESMAN 
			--Empleado: Manuel  Trabajo: SALESMAN 
			--  ......
-- Nombre depatarmento: ACOOUNTING
			--Empleado: Ana  Trabajo: MANAGER 
			--Empleado: Mohamed  Trabajo: SALESMAN 
			--Empleado: Josemi  Trabajo: SALESMAN 
			--  ......

CREATE OR REPLACE PROCEDURE DUMMY.LISTADO_EMPLEADOS IS 

--CURSOR PARA DEPARTAMENTOS. EXPLICITOS
CURSOR C_DEPT IS 
SELECT DNAME,DEPTNO  FROM DEPT;
--EXPLICITOS
CURSOR C_EMPxDEPT(V_DEPT DEPT.DEPTNO%TYPE) IS
SELECT ENAME,JOB FROM EMP
WHERE DEPTNO =V_DEPT;
v_total number(5);
BEGIN
	
	FOR registro_dept IN C_DEPT LOOP
		--IMPLICITO
		SELECT count(*) INTO v_total FROM EMP WHERE  DEPTNO =registro_dept.deptno;
		
	   DBMS_OUTPUT.PUT_LINE('Nombre de departamento: '|| registro_dept.dname || ' Total empleados: ' || v_total );
		FOR registro_emp IN C_EMPxDEPT(registro_dept.deptno) LOOP
			DBMS_OUTPUT.PUT_LINE('              Nombre de empleado: '|| registro_emp.ENAME || ' Trabajo: ' || registro_emp.job);
		
		END LOOP;
	
	END LOOP;
	
END;



BEGIN
	LISTADO_EMPLEADOS;
END;



    

