-- 1. Realiza un procedimiento que reciba un número de departamento y muestre por pantalla su nombre y localidad.
PROCEDURE P_EMPRESA0(NUMDEPAR NUMBER)
IS 
	DEPARTAMENTO VARCHAR2 (20);
	LOCALIDAD VARCHAR2 (20);
BEGIN 
	SELECT D.DNAME, D.LOC 
	INTO DEPARTAMENTO, LOCALIDAD
	FROM DEPT D
	WHERE D.DEPTNO =NUMDEPAR;
	DBMS_OUTPUT.PUT_LINE('LA INFORMACION DEL DEPARTAMENTO ES ' || DEPARTAMENTO);
	DBMS_OUTPUT.PUT_LINE('LA INFORMACION DEL DEPARTAMENTO ES ' || LOCALIDAD);
END;
BEGIN 
	P_EMPRESA0(10);
END;

--2. Realiza una función devolver_sal que reciba un nombre de departamento y devuelva la suma de sus salarios
CREATE OR REPLACE FUNCTION EMPRESA.DEVOLVER_SAL (NOMBREDEPAR VARCHAR2)
RETURN NUMBER 
IS
	SUMASALARIAL NUMBER;
BEGIN 
	SELECT SUM(E.SAL)
	INTO SUMASALARIAL
	FROM EMP E, DEPT D
	WHERE E.DEPTNO=D.DEPTNO AND D.DNAME=NOMBREDEPAR;
	RETURN(SUMASALARIAL);
END;
SELECT DEVOLVER_SAL ('ACCOUNTING') FROM DUAL;
--3. Realiza un procedimiento MostrarAbreviaturas que muestre las tres primeras letras del nombre de cada empleado.
CREATE OR REPLACE PROCEDURE EMPRESA.MOSTRARABREVIATURAS
IS  
	CURSOR C_PROC1 IS
	SELECT SUBSTR(E.ENAME, 1,3) AS ABREVIATURA
	FROM EMP E;
BEGIN 
	FOR REGISTRO IN C_PROC1
	LOOP
		DBMS_OUTPUT.PUT_LINE(REGISTRO.ABREVIATURA);
	END LOOP;
END;
BEGIN
	MOSTRARABREVIATURAS;
END;
--Realiza un procedimiento que reciba un número de departamento y muestre una lista de sus empleados.
CREATE OR REPLACE
PROCEDURE P_EMPRESA1(DEPTNOM NUMBER)
IS 
	CURSOR C_PROC2(DEPTNUM NUMBER) IS 
	SELECT E.EMPNO
	FROM EMP E
	WHERE E.DEPTNO=DEPNUM;
BEGIN
	FOR REGISTRO IN C_PROC2(DEPTNOM)
	LOOP
		DBMS_OUTPUT.PUT_LINE('INFORMACION DEL EMPLEADO ' || REGISTRO.EMPNO);
	END LOOP;
END;
BEGIN 
	P_EMPRESA1(30);
END;
--Realiza un procedimiento MostrarJefes que reciba el nombre de un departamento y muestre los nombres de los empleados de ese departamento que son jefes de otros empleados.Trata las excepciones que consideres necesarias.
CREATE OR REPLACE 
PROCEDURE MOSTRARJEFES(NUMDEPAR EMP.DNAME%TYPE)
IS 
	CURSOR C_PROC3(NUMDEPARTAMENTO EMP.DNAME%TYPE) IS 
	SELECT E2.ENAME
	FROM EMP E1, EMP E2
	WHERE E1.DEPTNO=NUMDEPARTAMENTO AND E1.MGR=E2.EMPNO;
	NUEVAEXCEPTION EXCEPTION;
BEGIN
	FOR REGISTRO IN C_PROC3(NUMDEPAR)
	LOOP
		DBMS_OUTPUT.PUT_LINE('EL EMPLEADO ' || REGISTRO.ENAME || ' ES JEFE');
	END LOOP;
	IF C_PROC3%ROWCOUNT=0 THEN
	RAISE NUEVAEXCEPTION;
	END IF;
    EXCEPTION
			WHEN NUEVAEXCEPTION THEN 
			DBMS_OUTPUT.PUT_LINE('NO HAY DATOS DEVUELTOS');
END;
BEGIN 
	MOSTRARJEFES('ACCOUNTING');
END;
--Hacer un procedimiento que muestre el nombre y el salario del empleado cuyo código es 7082
CREATE OR REPLACE
PROCEDURE P_EMPLEADO
IS
	NOMBRE VARCHAR2 (20);
	SALARIO NUMBER (20);
BEGIN 
	SELECT E.ENAME, E.SAL
	INTO NOMBRE, SALARIO
	FROM EMP E
	WHERE E.EMPNO=7369;
	DBMS_OUTPUT.PUT_LINE('EL EMPLEADO ' || NOMBRE || ' RECIBE ' || SALARIO || ' EUROS ');
END;
BEGIN
	P_EMPLEADO;
END;
--Realiza un procedimiento llamado HallarNumEmp que recibiendo un nombre de departamento, muestre en pantalla el número de empleados de dicho departamento Si el departamento no tiene empleados deberá mostrar un mensaje informando de ello. Si el departamento no existe se tratará la excepción correspondiente.
CREATE OR REPLACE
PROCEDURE HALLARNUMEMP (NOMBREDEPAR VARCHAR2)
IS
    NUMEROEMPLEADOS EMP.DNAME%TYPE;
BEGIN
	SELECT COUNT(E.EMPNO)
	INTO NUMEROEMPLEADOS
	FROM EMP E, DEPT D
	WHERE E.DEPTNO=D.DEPTNO AND D.NAME=NOMBREDEPAR;
	DBMS_OUTPUT.PUT_LINE('NUMERO DE EMPLEADOS ES ' || NUMEROEMPLEADOS);
	EXCEPTION
	WHEN NUMEROEMPLEADOS=0 THEN
	    DBMS_OUTPUT.PUT_LINE('NO TIENE EMPLEADOS');
	EXCEPTION
	WHEN DEPNO IS NULL THEN
	    DBMS_OUTPUT.PUT_LINE('NO EXISTE ESTE DEPARTAMENTO');
END;
BEGIN
	HALLARNUMEMP ('SALES');
END;
--. Hacer un procedimiento que reciba como parámetro un código de empleado y devuelva su nombre.
CREATE OR REPLACE
PROCEDURE P_NOMBREEMPLEADO(EMPNO NUMBER)
IS
    NOMBREEMPLEADO EMP.ENAME%TYPE;
BEGIN
	SELECT E.ENAME
	INTO NOMBREEMPLEADO
	FROM EMP E
	WHERE E.EMPNO=EMPNO;
	DBMS_OUTPUT.PUT_LINE('EL CODIGO ES DEL EMPLEADO LLAMADO ' || NOMBREEMPLEADO);
END;
BEGIN
	P_NOMBREEMPLEADO(20);
END;
--9. Codificar un procedimiento que reciba una cadena y la visualice al revés
CREATE OR REPLACE PROCEDURE EMPRESA.P_REVERSE (NOMBRE VARCHAR2)
IS
	CADENA VARCHAR2(50);
BEGIN
	FOR I IN REVERSE 1.. LENGTH(NOMBRE)
	LOOP
		CADENA:=SUBSTR(CADENA,1,1); 
	END LOOP;
	DBMS_OUTPUT.PUT_LINE(CADENA);
END;
BEGIN
	P_REVERSE ('IVAN');
END;
--. Escribir un procedimiento que reciba una fecha y escriba el año, en número, correspondiente a esa fecha
CREATE OR REPLACE PROCEDURE EMPRESA.P_FECHA (FECHA DATE)
IS
    VANIO NUMBER;
BEGIN
	VANIO:= EXTRACT(YEAR FROM FECHA);
	DBMS_OUTPUT.PUT_LINE('EL AÑO DE LA FECHA ES ' || VANIO);
END;
BEGIN
	P_FECHA ('12/17/1980 12:00:00 AM', 'MM/DD/YYYY HH:MI:SS AM');
END;
--Realiza una función llamada CalcularCosteSalarial que reciba un nombre de departamento y devuelva la suma de los salarios y comisiones de los empleados de dicho departamento.
CREATE OR REPLACE 
FUNCTION CALCULARCOSTESALARIAL(NAMEDEPAR DEPT.DNAME%TYPE)
RETURN NUMBER
IS
    SUMASALARIOS NUMBER (10,2);
BEGIN
	SELECT SUM(E.SAL) AS SALARIOS, SUM(E.COMM) AS COMISIONES
	INTO SUMASALARIOS; 
	FROM EMP E, DEPT D
	WHERE D.DEPTNO=E.DEPTNO AND D.DNAME LIKE NAMEDEPAR;
    RETURN DBMS_OUTPUT.PUT_LINE('EL SALARIO TOTAL ES ' || COSTE.SALARIOS || ' Y SUS COMISIONES SON ' || COSTE.COMISION);
END;
BEGIN
	DBMS_OUTPUT.PUT_LINE(CALCULARCOSTESALARIAL('SALES'));
END;
--Codificar un procedimiento que permita borrar un empleado cuyo número se pasará en la llamada. Si no existiera dar el correspondiente mensaje de error.
CREATE OR REPLACE PROCEDURE EMPRESA.P_DELETE(NUMERO DEPT.DEPTNO%TYPE)
IS
	EMPLEADO_NO_ENCONTRADO EXCEPTION;
BEGIN
	DELETE FROM EMP E WHERE EMPNO=NUMERO;
	IF SQL%NOTFOUND THEN
		RAISE EMPLEADO_NO_ENCONTRADO;
	END IF;
	EXCEPTION
		WHEN EMPLEADO_NO_ENCONTRADO THEN
	    	DBMS_OUTPUT.PUT_LINE('NO EXISTE ESE CODIGO DE EMPLEADO Y NO SE PUDO ELIMINAR');
END;
BEGIN
	P_DELETE(7369);
END;
-- Realiza un procedimiento MostrarCostesSalariales que muestre los nombres de todos los departamentos y el coste salarial de cada uno de ellos
CREATE OR REPLACE 
PROCEDURE MOSTRARCOSTESSALARIALES
IS
	CURSOR C_COSTESSALARIALES IS
	SELECT D.DNAME, NVL(SUM(E.SAL)+ SUM(E.COMM),0) AS SALARIOS
	FROM EMP E, DEPT D
	WHERE D.DEPTNO=E.DEPTNO
	GROUP BY D.DNAME;
BEGIN
	FOR COSTES IN C_COSTESSALARIALES
	LOOP
	DBMS_OUTPUT.PUT_LINE(COSTES.DNAME || ' ' || COSTES.SALARIOS);
	END LOOP;
END;
BEGIN
	MOSTRARCOSTESSALARIALES;
END;
--Escribir un procedimiento que modifique la localidad de un departamento. El procedimiento recibirá como parámetros el número del departamento y la localidad nueva. 
CREATE OR REPLACE
PROCEDURE P_MODIFICAR(NUMERODEPARTAMENTO NUMBER, LOCALIDAD VARCHAR2)
IS
BEGIN
	UPDATE DEPT SET LOC=LOCALIDAD WHERE DEPNO=NUMERODEPARTAMENTO;
END;
BEGIN
	P_MODIFICAR(10, 'SEVILLA');
END;
--Realiza un procedimiento MostrarMasAntiguos que muestre el nombre del empleado más antiguo de cada departamento junto con el nombre del departamento. Trata las excepciones que consideres necesarias.
CREATE OR REPLACE PROCEDURE EMPRESA.MOSTRARMASANTIGUOS
IS
	EMPLEADOANTIGUO EXCEPTION;
	CURSOR C_FECHA IS
	SELECT E.ENAME, D.DNAME
	FROM EMP E, DEPT D
	WHERE E.DEPTNO=D.DEPTNO
	AND E.HIREDATE IN (SELECT MIN(E.HIREDATE) FROM EMP E);
BEGIN
	IF C_FECHA%NOTFOUND THEN
		RAISE EMPLEADOANTIGUO;
	END IF;
	FOR ANTIGUO IN C_FECHA
	LOOP
	DBMS_OUTPUT.PUT_LINE(ANTIGUO.DNAME || ANTIGUO.ENAME);
	END LOOP;
	EXCEPTION
    WHEN EMPLEADOANTIGUO THEN
	    DBMS_OUTPUT.PUT_LINE('EL NOMBRE DE DEPARTAMENTO ES NULO Y INVALIDO');
END;
BEGIN 
	MOSTRARMASANTIGUOS;
END;